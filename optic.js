/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./common/authorization/Jwtauthorization.js":
/*!**************************************************!*\
  !*** ./common/authorization/Jwtauthorization.js ***!
  \**************************************************/
/***/ (() => {

eval("// const jwt = require(\"jsonwebtoken\");\n// const {  Stores } = require('../../model/vc-stores')\n\n// console.log(\"auth\",process.env.JWT_SECRETKEY)\n// exports.verifyToken = async (req, res,next) => {\n//     console.log(\"hello\");\n//     const bearerHeader = req.headers[\"authorization\"];\n//     console.log(\"req header\", req.headers[\"authorization\"])\n//     console.log(\"bearerHeader\",bearerHeader)\n//     if (typeof bearerHeader !== \"undefined\") {\n//       const bearer = bearerHeader.split(\" \");\n//       console.log(\"bearer\",bearer)\n//       const bearerToken = bearer[1];\n//       console.log(\"bearerToken\",bearerToken)\n//       req.token = bearerToken;\n//       console.log(\"req.token\",req.token)\n//       try{\n//         var decoded = jwt.verify(req.token, process.env.JWT_SECRETKEY);\n//         console.log(\"decoded\",decoded)\n//       let userdata = await Stores.findOne({ _id: decoded.sub.id });\n//       if(userdata===null){\n//         return res.status(403).send({\"user_msg\": \"invalid token 44\", \"status_code\": 0})\n//       }\n//       else{\n//           console.log(123)\n//           console.log(\"userdata\",userdata)\n//           if(userdata.jwt_token===req.token){\n//             next();\n//           }\n//           else{\n//             return res.status(403).send({\"user_msg\": \"invalid token\", \"status_code\": 0 })\n//           }\n          \n//       }\n//       }\n//       catch (err) {\n//           console.log(\"token error\",err)\n//         res.status(500).send({\"user_msg\": \"inavlid token 123\", \"status_code\": 0,\"err\":err });\n//     }\n      \n//     } else {\n//       res.json({\n//         message: \"token required\",\n//         status_code: 400,\n//       });\n//     }\n//   }\n\n//# sourceURL=webpack://vc-agent-api/./common/authorization/Jwtauthorization.js?");

/***/ }),

/***/ "./common/authorization/messages.js":
/*!******************************************!*\
  !*** ./common/authorization/messages.js ***!
  \******************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n\"LOGIN\":\"Login successful...\",\n\"STORE_CREATE\":\"Store Created Successfully....\",\n\"STORE_UPDATE\":\"Store Updated Successfully....\",\n\"STORE_DELETE\":\"Store Deleted Successfully....\",\n\"PRODUCT_CREATE\":\"Product Created Sucessfully....\",\n\"PRODUCT_UPDATED\":\"Product Updated Sucessfully....\",\n\"PRODUCT_DELETED\":\"Product Deleted Sucessfully....\",\n\"CHANGE_PASSWORD_ERROR\":\"Invalid old paassword\",\n\"CHANGE_PASSWORD\":\"Password changed successfully\",\n\"PRODUCT_CREATE\":\"Product Created Sucessfully....\",\n\"PRODUCT_UPDATED\":\"Product Updated Sucessfully....\",\n\"PRODUCT_DELETED\":\"Product Deleted Sucessfully....\",\n\"FORGOT_PASSWORD\":\"A link has been sent to your email. Please follow the instructions to reset your password.\",\n\"ACCESS_POINT_CREATED\":\"Access point created Successfully....\",\n\n};\n\n\n\n//# sourceURL=webpack://vc-agent-api/./common/authorization/messages.js?");

/***/ }),

/***/ "./controller/ac-controllers.js":
/*!**************************************!*\
  !*** ./controller/ac-controllers.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const { User } = __webpack_require__(/*! ../model/users */ \"./model/users.js\")\nconst { Companies } = __webpack_require__(/*! ../model/companies */ \"./model/companies.js\")\nconst { Stores } = __webpack_require__(/*! ../model/vc-stores */ \"./model/vc-stores.js\")\nconst { Products } = __webpack_require__(/*! ../model/vc-products */ \"./model/vc-products.js\")\nconst { Esl } = __webpack_require__(/*! ../model/vc-esl */ \"./model/vc-esl.js\")\nconst { Accesspoint } = __webpack_require__(/*! ../model/vc-acesspoint */ \"./model/vc-acesspoint.js\")\nconst { Manager } = __webpack_require__(/*! ../model/manager */ \"./model/manager.js\")\nconst { Geners } = __webpack_require__(/*! ../model/geners */ \"./model/geners.js\")\n\nconst { StoreProduct } = __webpack_require__(/*! ../model/storeProduct */ \"./model/storeProduct.js\")\nconst verify_token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOnsiaWQiOiI2MGIwOTViZjBjZDc3ZjJiYjcyMzM0YTAiLCJ1c2VyX25hbWUiOiJtb3VuaWthIn0sImlhdCI6MTYyMjE5NDQ2OSwiZXhwIjoxNjUzNzMwNDY5fQ.V4mqdGcIYQU7sS2E2bYC46RmiOTIaYmz2NNHmCJS8Jg\"\n\nconst config = __webpack_require__(/*! ../common/authorization/messages */ \"./common/authorization/messages.js\")\nvar nodemailer = __webpack_require__(/*! nodemailer */ \"nodemailer\");\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\nconst jwt_decode = __webpack_require__(/*! jwt-decode */ \"jwt-decode\");\nconst useragent = __webpack_require__(/*! express-useragent */ \"express-useragent\");\nvar transporter = nodemailer.createTransport({\n    service: \"gmail\",\n    auth: {\n        user: \"prreddy9640@gmail.com\",\n        pass: \"ramanj@ram\",\n    },\n});\nconst AWS = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\n\nAWS.config.update({\n    accessKeyId: \"AKIAWN4DB66MNRY33WVU\",\n    secretAccessKey: \"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\",\n    region: \"ap-south-1\",\n});\nexports.insert = async (req, res) => {\n    let user_otp=stringGen(4)\n    user = new User({\n        user_name: req.body.user_name,\n        mobile_no: req.body.mobile_no,\n        email: req.body.email,\n        password: req.body.password,\n        otp:user_otp\n    });\n    try {\n\n        await user.save();\n        var mailOptions = {\n            from: \"prreddy9640@gmail.com\",\n            to: req.body.email,\n            subject: \"OTP\",\n            text: \"OTP : \" + user_otp,\n        };\n        console.log(\"mailOptions\", mailOptions)\n        transporter.sendMail(mailOptions, function (error, info) {\n            if (error) {\n                console.log(error);\n                res.json({\n                    message: \"error\",\n                    status_code: 200,\n                });\n            } else {\n                //  console.log(\"Email sent: \" + info.response);\n                return res.send({\n                    \"user_msg\": \"User created successfully... \", \"user_data\": user\n                });\n            }\n        });\n       \n    }\n    catch (err) {\n        return res.status(500).send({\n            \"user_msg\": \"Error create user\",\n        });\n    }\n};\n\nexports.login = async (req, res) => {\n        let agentdata = await User.findOne({ \"email\": req.body.email });\n\n    console.log(\"after login agent data\", agentdata)\n    if (agentdata === null) {\n        res.status(401).send({ \"user_msg\": \"invalid email\", \"status_code\": 0 })\n    }\n    if (agentdata.password != req.body.password) {\n        res.status(401).send({ \"user_msg\": \"invalid password\", \"status_code\": 0 })\n    }\n    if (agentdata.is_active === false) {\n        res.status(401).send({ \"msg\": \"user deactive\", \"status_code\": 0 })\n    }\n    if (agentdata.otp_verify === false) {\n        res.status(401).send({ \"msg\": \"please verify otp\", \"status_code\": 0 })\n    }\nelse{\n    res.status(200).send({ \"user_msg\": config.LOGIN, \"status_code\": 1, \"userdata\": agentdata})\n\n}\n\n};\n\nexports.otpverify = async (req, res) => {\n    console.log(\"login\", req.body)\n    try {\n       \n        let userdata = await User.findOne({ otp: req.body.otp });\n        if (userdata === null) {\n            return res.status(403).send({ \"user_msg\": \"inavlid otp\", \"status_code\": 0 })\n        }\n        else {\n            return res.status(200).send({ \"user_msg\": \"Success\", \"status_code\": 1 })\n\n        }\n    }\n    catch (err) {\n        console.log(\"token error\", err)\n        res.status(500).send({ \"user_msg\": \"inavlid otp\", \"status_code\": 1, \"err\": err });\n    }\n\n};\n\nexports.passwordUpdate = async (req, res) => {\n    // const bearerHeader = req.headers[\"authorization\"];\n    // const bearer = bearerHeader.split(\" \");\n    // const bearerToken = bearer[1];\n    // const jtoken = jwtdecoded(bearerToken)\n    let userdata = await User.findOne({ password_reset_token: req.body.password_reset_token });\n    console.log(\"check mobile already exists or not\", userdata)\n    if (userdata === null) {\n        res.status(401).send({ \"user_msg\": \"faild authorization\", \"status_code\": 0 })\n    }\n\n    else {\n        await User.findByIdAndUpdate({ _id: userdata._id }, { $set: { password: req.body.newpassword } }).then(function (ok) {\n\n            return res.send({ \"user_msg\": config.CHANGE_PASSWORD, \"status_code\": 1 });\n\n\n        });\n    }\n\n\n};\nexports.updateAgent = async (req, res) => {\n    console.log(\"updateAgentById\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken);\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source);\n    console.log(\"agent\", agentbrowser)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    const token = jwt.sign({ sub: { id: req.body.id, user_name: req.body.user_name } }, \"secretkey\", { expiresIn: \"365d\" }, { algorithm: \"HS256\" });\n\n    User.findByIdAndUpdate({ _id: req.body.id }, {\n        $set: {\n            updated_time: Date.now(),\n            user_roles: req.body.user_roles,\n            user_stores: req.body.user_stores,\n            user_name: req.body.user_name,\n            mobile_no: req.body.mobile_no,\n            address: req.body.address,\n            email: req.body.email,\n            jwt_token: token,\n            updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n            user_ip: ip_adderss,\n            user_agent: req.header('User-Agent'),\n            update_ip: ip_adderss,\n            update_agent: agentbrowser.browser + \"(\" + agentbrowser.version + \")\",\n        }\n    }).then(function (ok) {\n        return res.send({ \"user_mesg\": \"Update user successfully...\", \"status_code\": 1, \"update_by\": jtoken.sub.user_name, \"user_ip\": ip_adderss, \"updated_time\": new Date(), \"update_agent\": agentbrowser.browser + \"(\" + agentbrowser.version + \")\" });\n    });\n\n};\nexports.getUser = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    if (req.body.user_id === undefined || req.body.user_id === null) {\n        res.status(200).send({ \"User_msg\": \"User id is required\", \"Status_code\": 0 })\n    }\n    try {\n        const data = await User.findById({ _id: req.body.user_id });\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n        res.status(200).send({ \"User_msg\": \" User data\", \"Status_code\": 1, \"userdata\": data });\n    } catch (error) {\n        res.status(500).send({ \"User_msg\": \"User data Error\", \"Status_code\": 0 });\n    }\n}\nexports.Adminedit = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken);\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source);\n    //console.log(\"agent\", agentbrowser)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    const token = jwt.sign({ sub: { id: req.body.id, user_name: req.body.user_name } }, \"secretkey\", { expiresIn: \"365d\" }, { algorithm: \"HS256\" });\n    try {\n        const data = await User.findByIdAndUpdate({ _id: req.body.id }, {\n            $set: {\n                updated_time: Date.now(),\n                user_name: req.body.user_name,\n                mobile_no: req.body.mobile_no,\n                address: req.body.address,\n                email: req.body.email,\n                jwt_token: token,\n                updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                user_ip: ip_adderss,\n                user_agent: req.header('User-Agent'),\n                update_ip: ip_adderss,\n                update_agent: agentbrowser.browser + \"(\" + agentbrowser.version + \")\",\n            }\n        })\n        if (!data) {\n            res.status(404).send({ \"User_Msg\": \"Not Found\", \"Status_code\": 0 })\n        }\n        res.status(200).send({ \"User_Msg\": \"Updated Successfully.....\", \"Status_code\": 1, \"update_by\": jtoken.sub.user_name, \"user_ip\": ip_adderss, \"updated_time\": new Date(), \"update_agent\": agentbrowser.browser + \"(\" + agentbrowser.version + \")\" });\n\n    }\n    catch (err) {\n        res.status(500).send({ \"User_Msg\": \"Error\", \"Status_code\": 0 })\n    }\n\n};\nexports.deactiveAgentById = async (req, res) => {\n    console.log(\"deactiveAgentById\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source);\n    console.log(\"agent\", agentbrowser)\n    if (req.body.is_active === true) {\n        User.findByIdAndUpdate({ _id: req.body.id }, {\n            $set: {\n                updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                user_ip: ip_adderss,\n                update_ip: ip_adderss,\n                is_registered: false,\n                update_agent: agentbrowser.browser + \"(\" + agentbrowser.version + \")\",\n                user_agent: req.header('User-Agent'), updated_time: Date.now(), is_active: req.body.is_active,\n            }\n        }).then(function (ok) {\n            console.log(\"deactiveAgentById result\", ok)\n            if (req.body.is_active === true) {\n                return res.send({ \"user_msg\": \"User Activated\", \"status_code\": 1 });\n            }\n            else {\n                return res.send({ \"user_msg\": \"User Deactived\", \"status_code\": 1 });\n            }\n\n        });\n    }\n    else {\n        User.findByIdAndUpdate({ _id: req.body.id }, {\n            $set: {\n                updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                user_ip: ip_adderss,\n                update_ip: ip_adderss,\n                update_agent: agentbrowser.browser + \"(\" + agentbrowser.version + \")\",\n                user_agent: req.header('User-Agent'), updated_time: Date.now(), is_active: req.body.is_active,\n            }\n        }).then(function (ok) {\n            console.log(\"deactiveAgentById result\", ok)\n            if (req.body.is_active === true) {\n                return res.send({ \"user_mesg\": \"User Activated\", \"status_code\": 1 });\n            }\n            else {\n                return res.send({ \"user_mesg\": \"User Deactived\", \"status_code\": 1 });\n            }\n\n        });\n    }\n\n};\nexports.ChangePassword = async (req, res) => {\n    // const bearerHeader = req.headers[\"authorization\"];\n    // const bearer = bearerHeader.split(\" \");\n    // const bearerToken = bearer[1];\n    // const jtoken = jwtdecoded(bearerToken)\n    let userdata = await User.findOne({ _id: req.body.use_id });\n    console.log(\"check mobile already exists or not\", userdata)\n    if (userdata === null) {\n        res.status(401).send({ \"user_msg\": \"faild authorization\", \"status_code\": 0 })\n    }\n    if (userdata.password != req.body.oldPassword) {\n        res.status(401).send({ \"user_msg\": config.CHANGE_PASSWORD_ERROR, \"status_code\": 0 })\n    }\n    else {\n        await User.findByIdAndUpdate({ _id: req.body.use_id }, { $set: { password: req.body.newpassword } }).then(function (ok) {\n\n            return res.send({ \"user_msg\": config.CHANGE_PASSWORD, \"status_code\": 1 });\n\n\n        });\n    }\n\n\n};\nexports.forgotPassword = async (req, res) => {\n    // const bearerHeader = req.headers[\"authorization\"];\n    // const bearer = bearerHeader.split(\" \");\n    // const bearerToken = bearer[1];\n    // const jtoken = jwtdecoded(bearerToken)\n    let userdata = await User.findOne({ email: req.body.email });\n    console.log(\"check email already exists or not\", userdata)\n    if (userdata === null) {\n        res.status(401).send({ \"user_msg\": \"faild authorization\", \"status_code\": 0 })\n    }\n\n    else {\n        var mailOptions = {\n            from: \"prreddy9640@gmail.com\",\n            to: req.body.email,\n            subject: \"Password\",\n            text: \"Password :  : \" + userdata.password,\n        };\n        console.log(\"mailOptions\", mailOptions)\n        transporter.sendMail(mailOptions, function (error, info) {\n            if (error) {\n                console.log(error);\n                res.json({\n                    message: \"error\",\n                    status_code: 200,\n                });\n            } else {\n                //  console.log(\"Email sent: \" + info.response);\n                return res.send({\n                    \"user_msg\": \"User created successfully... \", \"user_data\": user\n                });\n            }\n        });\n    }\n}\nexports.mail = async (req, res) => {\n    var mailOptions = {\n        from: \"prreddy9640@gmail.com\",\n        to: \"ramanjaneyareddy531@gmail.com\",\n        subject: \"Forgot Password\",\n        text: \"https://samtag-cms-dev.wallspace.digital/\" + token,\n    };\n    console.log(\"mailOptions\", mailOptions)\n    transporter.sendMail(mailOptions, function (error, info) {\n        if (error) {\n            console.log(error);\n            res.json({\n                message: \"error\",\n                status_code: 200,\n            });\n        } else {\n            //  console.log(\"Email sent: \" + info.response);\n            return res.send({ \"user_msg\": \"sent success\", \"status_code\": 1 });\n        }\n    });\n};\nexports.createCompanies = async (req, res) => {\n\n    company = new Companies({\n        company_name: req.body.company_name,\n        company_address: req.body.company_address,\n        // email: req.body.email,\n        // address: req.body.address,\n        // user_roles: [\"Admin\"],\n        // password:req.body.password,\n        // created_by: { id: \"123\", user_name: \"ram\" },\n        // user_ip: \"1234\",\n        // create_ip: \"1234\",\n        // create_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n        // update_ip: \"1234\",\n        // updated_by: { id: \"123\", user_name: \"ram\" },\n        // update_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n        // user_agent: req.header('User-Agent')\n    });\n    try {\n\n        await company.save();\n        return res.send({\n            \"user_msg\": \"Company created successfully... \",\n        });\n    }\n    catch (err) {\n        console.log(err)\n        return res.status(500).send({\n            \"user_msg\": \"Error create company... \",\n        });\n    }\n};\nexports.createManager = async (req, res) => {\n\n    manager = new Manager({\n        manager_name: req.body.manager_name,\n        company_id: req.body.company_id,\n\n    });\n    try {\n\n        await manager.save();\n        return res.send({\n            \"user_msg\": \"Manager created successfully... \",\n            \"status_code\": 1\n        });\n    }\n    catch (err) {\n        console.log(err)\n        return res.status(500).send({\n            \"user_msg\": \"Error create manager... \",\n        });\n    }\n};\nexports.listManagers = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    try {\n        const data = await Manager.find({});\n        console.log(data)\n        res.status(200).send({ \"user_msg\": \"managers list successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n}\nexports.createstore = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source)\n    browserdata = useragent.parse(source)\n    ua = useragent.parse(source);\n\n            let data = await Stores.findOne({ store_name: req.body.store_name })\n            if (data === null) {\n                store = new Stores({\n                    company_id: req.body.company_id,\n                    store_name: req.body.store_name,\n                    store_city: req.body.store_city,\n                    store_address: req.body.store_address,\n                    store_manager: req.body.store_manager,\n                    created_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                    user_ip: ip_adderss,\n                    create_ip: ip_adderss,\n                    create_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n                    update_ip: ip_adderss,\n                    updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                    update_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n                    user_agent: req.header('User-Agent')\n                });\n                try {\n                    await store.save();\n                    console.log(\"store\", store)\n                    res.status(200).send({ \"user_msg\": config.STORE_CREATE, \"status_code\": 1, \"store\": store });\n                }\n                catch (error) {\n                    res.status(500).send({ \"user_msg\": \"Create Store Error\", \"Status_code\": 0 });\n                }\n\n            }\n            else {\n                res.status(200).send({ \"User_msg\": \"Already Exits\", \"status_code\": 0 })\n            }\n       \n\n    \n\n}\nexports.Getstore = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    try {\n        const data = await Stores.find({});\n        console.log(data)\n        res.status(200).send({ \"user_msg\": \" Get Store successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n}\nexports.GetOnestore = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    if (req.body._id === undefined || req.body._id === null) {\n        res.status(200).send({ \"User_msg\": \"Id is required\", \"Status_code\": 0 })\n    }\n    try {\n        const data = await Stores.findById({ _id: req.body._id });\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n        res.status(200).send({ \"User_msg\": \" GetOne Store successfully\", \"Status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"User_msg\": \"GetOne Store Error\", \"Status_code\": 0 });\n    }\n}\nexports.updatestore = async (req, res) => {\n    console.log(\"req.body\", req.body)\n\n    try {\n        const data = await Stores.findByIdAndUpdate({ _id: req.body._id }, {\n            $set: {\n                updated_time: Date.now(),\n                store_name: req.body.store_name,\n                store_city: req.body.store_city,\n                store_address: req.body.store_address,\n                store_manager: req.body.store_manager,\n\n            }\n\n        })\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n        res.status(200).send({ \"User_msg\": config.STORE_UPDATE, \"Status_code\": 1 });\n    } catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error\", \"Status_code\": 0 });\n    }\n}\nexports.deletestore = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    if (req.body._id === undefined || req.body._id === null) {\n        res.status(200).send({ \"User_msg\": \" Id is required\", \"status_code\": 0 })\n    }\n    try {\n        const data = await Stores.findByIdAndDelete({ _id: req.body._id });\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found Store\", \"Status_code\": 0 });\n        }\n        res.status(200).send({ \"User_msg\": config.STORE_DELETE, \"Status_code\": 1 })\n\n    } catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Delete Store\", \"Status_code\": 0 });\n    }\n}\nexports.GetListstores = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    try {\n        const data = await Stores.find({ company_id: req.body.company_id });\n        console.log(data)\n        res.status(200).send({ \"user_msg\": \" Get Company List successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n}\n\n\nexports.searchQuery = async (req, res) => {\n    console.log(\"searchQuery\", req.body)\n\n\n    let data = await Stores.find({\n\n        company_id: { $regex: req.body.company_id, $options: \"$i\" },\n        store_address: { $regex: req.body.store_address, $options: \"$i\" },\n        store_city: { $regex: req.body.store_city, $options: \"$i\" },\n        store_manager: { $regex: req.body.store_manager, $options: \"$i\" },\n        store_name: { $regex: req.body.store_name, $options: \"$i\" },\n\n    })\n    try {\n\n        res.status(200).send({ \"user_msg\": \" Serach successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n};\nexports.Createproduct = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source)\n    browserdata = useragent.parse(source)\n    ua = useragent.parse(source);\n\n    let data = await Products.findOne({ product_name: req.body.product_name })\n    if (data === null) {\n\n        product = new Products({\n            company_id: req.body.company_id,\n            product_unique_id: req.body.product_unique_id,\n            product_name: req.body.product_name,\n            standard_price: req.body.standard_price,\n            sale_price: req.body.sale_price,\n            discount: req.body.discount,\n            bar_code: req.body.bar_code,\n            content: req.body.content,\n            unit: req.body.unit,\n            created_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n            user_ip: ip_adderss,\n            create_ip: ip_adderss,\n            create_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n            update_ip: ip_adderss,\n            updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n            update_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n            user_agent: req.header('User-Agent')\n\n        })\n        try {\n            await product.save();\n            res.status(200).send({ \"User_msg\": config.PRODUCT_CREATE, \"Status_code\": 1, \"product\": product })\n        }\n        catch (error) {\n            res.status(500).send({ \"User_msg\": \"Error Created on Product\", \"Status_code\": 0 })\n        }\n    }\n    else {\n        res.status(200).send({ \"User_msg\": \"Already Exits\", \"Status_code\": 0 })\n    }\n}\nexports.Getproduct = async (req, res) => {\n    try {\n        let data = await Products.find({})\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n\n        res.status(200).send({ \"User_msg\": \"List Get Successfully....\", \"Status_code\": 1, \"data\": data })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Get list\", \"Status_code\": 0 })\n    }\n}\nexports.Getoneproduct = async (req, res) => {\n    if (req.body._id === undefined || req.body._id === null) {\n        res.status(200).send({ \"User_msg\": \" Id is required\", \"status_code\": 0 })\n    }\n    console.log(\"req.body\", req.body)\n    try {\n        let data = await Products.findById({ _id: req.body._id })\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n\n        res.status(200).send({ \"User_msg\": \"GetOne product Successfully...\", \"Status_code\": 1, \"data\": data })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Get data\", \"Status_code\": 0 })\n    }\n}\nexports.Updateproduct = async (req, res) => {\n    console.log(\"req.body\", req.body)\n\n    try {\n        const data = await Products.findByIdAndUpdate({ _id: req.body._id }, {\n            $set: {\n                updated_time: Date.now(),\n                product_unique_id: req.body.product_unique_id,\n                product_name: req.body.product_name,\n                standard_price: req.body.standard_price,\n                sale_price: req.body.sale_price,\n                discount: req.body.discount,\n                bar_code: req.body.bar_code,\n                content: req.body.content,\n                unit: req.body.unit\n\n            }\n\n        })\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0, });\n        }\n\n        res.status(200).send({ \"User_Msg\": config.PRODUCT_UPDATED, \"Status_code\": 1 })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Update\", \"Status_code\": 0 })\n    }\n}\n\n\nexports.Deleteproduct = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    if (req.body._id === undefined || req.body._id === null) {\n        res.status(200).send({ \"User_msg\": \" Id is required\", \"status_code\": 0 })\n    }\n    try {\n        let data = await Products.findOneAndDelete({ _id: req.body._id })\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n\n        res.status(200).send({ \"User_msg\": config.PRODUCT_DELETED, \"Status_code\": 1 })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Delete data\", \"Status_code\": 0 })\n    }\n}\nexports.searchproduct = async (req, res) => {\n    console.log(\"searchproduct\", req.body)\n\n\n    const data = await Products.find({\n\n        product_name: { $regex: req.body.product_name, $options: \"$i\" },\n        bar_code: { $regex: req.body.bar_code, $options: \"$i\" },\n\n    })\n    try {\n\n        res.status(200).send({ \"user_msg\": \" Serach successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n};\nexports.GetListproducts = async (req, res) => {\n    try {\n        let data = await Products.find({ company_id: req.body.company_id })\n        console.log(\"data\", data)\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 });\n        }\n\n        res.status(200).send({ \"User_msg\": \"List Get Successfully....\", \"Status_code\": 1, \"data\": data })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Get list\", \"Status_code\": 0 })\n    }\n}\nexports.Storepagination = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    let limit = req.query.limit && req.query.limit <= 100 ? parseInt(req.query.limit) : 10;\n    let page = req.body.page ?? 1 ?? 2 ?? 3;\n    if (req.query) {\n        if (req.query.page) {\n            req.query.page = parseInt(req.query.page);\n            page = Number.isInteger(req.query.page) ? req.query.page : 10;\n        }\n    }\n\n    const post = await Stores.find().skip((page * limit) - limit).limit(limit)\n    res.status(200).send({ \"user_msg\": \"successfully\", \"status_code\": 1, \"post\": post })\n};\nexports.Productpagination = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    let limit = req.query.limit && req.query.limit <= 100 ? parseInt(req.query.limit) : 10;\n    let page = req.body.page ?? 1 ?? 2 ?? 3;\n    if (req.query) {\n        if (req.query.page) {\n            req.query.page = parseInt(req.query.page);\n            page = Number.isInteger(req.query.page) ? req.query.page : 10;\n        }\n    }\n\n    const post = await Products.find().skip((page * limit) - limit).limit(limit)\n    res.status(200).send({ \"user_msg\": \"successfully\", \"status_code\": 1, \"post\": post })\n};\n\n\nexports.createEsl = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source)\n    browserdata = useragent.parse(source)\n    ua = useragent.parse(source);\n\n    esl = new Esl({\n        company_id: req.body.company_id,\n        store: req.body.store,\n        name: req.body.name,\n        version: req.body.version,\n        unique_id: req.body.unique_id,\n        mac_address: req.body.mac_address,\n        battery_status: req.body.battery_status,\n        voltage: req.body.voltage,\n        poll_interval: req.body.poll_interval,\n        image: req.body.image,\n        last_login_ip: ip_adderss,\n        created_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n        user_ip: ip_adderss,\n        create_ip: ip_adderss,\n        create_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n        update_ip: ip_adderss,\n        updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n        update_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n        user_agent: req.header('User-Agent')\n\n    })\n    try {\n        await esl.save();\n        res.status(200).send({ \"User_msg\": \"Created Esl Successfully\", \"Status_code\": 1, \"esl\": esl })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error\", \"Status_code\": 0 })\n    }\n}\nexports.getEsl = async (req, res) => {\n    try {\n        let data = await Esl.find({})\n        if (!data) {\n            res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 })\n        }\n        res.status(200).send({ \"User_Msg\": \"List Get Successfully\", \"Status_code\": 1, \"data\": data })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error\", \"Status_code\": 0 })\n    }\n}\nexports.SerachEsl = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    let data = await Esl.find({\n        store: { $regex: req.body.store, $options: \"$i\" },\n        name: { $regex: req.body.name, $options: \"$i\" },\n        unique_id: { $regex: req.body.unique_id, $options: \"$i\" }\n    })\n    try {\n\n        res.status(200).send({ \"user_msg\": \" Serach successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n}\nexports.deleteEsl = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    if (req.body._id === undefined || req.body._id === null) {\n        res.status(200).send({ \"User_msg\": \" Id is required\", \"status_code\": 0 })\n    }\n    try {\n        const data = await Esl.findByIdAndDelete({ _id: req.body._id });\n        if (!data) {\n            return res.status(404).send({ \"User_msg\": \"Not Found Store\", \"Status_code\": 0 });\n        }\n        res.status(200).send({ \"User_msg\": \"Deleted Successfully\", \"Status_code\": 1 })\n\n    } catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error Delete \", \"Status_code\": 0 });\n    }\n}\nexports.createAccesspoint = async (req, res) => {\n    console.log(\"agent add request\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    console.log(ip_adderss)\n    var source = req.headers['user-agent'],\n        browserdata = useragent.parse(source);\n    console.log(\"agent\", browserdata.browser)\n    user = new Accesspoint({\n        company_id: req.body.company_id,\n        store_id: req.body.store_id,\n        name: req.body.name,\n        port: req.body.port,\n        ip_address: req.body.ip_address,\n        mac_address: \"00:0a:95:9d:68:16\",\n        model_id: req.body.model_id,\n        port: req.body.port,\n        status: \"true\",\n        esls: \"123\",\n        lan_Id: \"172.16. 0.0\",\n        pan_id: \"172.16\",\n        version: \"4.9\",\n        roaming: \"enable\",\n        created_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n        user_ip: ip_adderss,\n        create_ip: ip_adderss,\n        create_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n        update_ip: ip_adderss,\n        updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n        update_agent: browserdata.browser + \"(\" + browserdata.version + \")\",\n        user_agent: req.header('User-Agent')\n    });\n    try {\n\n        await user.save();\n        const userdata = { user_data: user }\n        const token = jwt.sign({ sub: { id: user._id, user_name: user.user_name, user_data: user } }, \"secretkey\", { expiresIn: \"365d\" }, { algorithm: \"HS256\" });\n        await Accesspoint.findByIdAndUpdate({ _id: user._id }, { $set: { jwt_token: token } }).then(function (ok) {\n            return res.send({\n                \"user_msg\": \" created successfully... \", \"user_data\": userdata.user_data\n            });\n        })\n    }\n    catch (err) {\n        return res.status(500).send({\n            \"user_msg\": \"Error create \",\n        });\n    }\n};\n\nexports.GetAccesspoint = async (req, res) => {\n    try {\n        let data = await Accesspoint.find({})\n        if (!data) {\n            res.status(404).send({ \"User_msg\": \"Not Found\", \"Status_code\": 0 })\n        }\n        res.status(200).send({ \"User_Msg\": \"List Get Successfully\", \"Status_code\": 1, \"data\": data })\n    }\n    catch (error) {\n        res.status(500).send({ \"User_msg\": \"Error\", \"Status_code\": 0 })\n    }\n}\nexports.SerachAccesspoint = async (req, res) => {\n    console.log(\"req.body\", req.body)\n    let data = await Accesspoint.find({\n        store_id: { $regex: req.body.store_id, $options: \"$i\" },\n        name: { $regex: req.body.name, $options: \"$i\" },\n        ip_address: { $regex: req.body.ip_address, $options: \"$i\" }\n    })\n    try {\n\n        res.status(200).send({ \"user_msg\": \" Serach successfully\", \"status_code\": 1, \"data\": data });\n    } catch (error) {\n        res.status(500).send({ \"user_msg\": \"Error\", \"Status_code\": 0 });\n    }\n}\nexports.ActiveAccesspoint = async (req, res) => {\n    console.log(\"ActiveAccesspoint\", req.body)\n    const bearerHeader = req.headers[\"authorization\"];\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n    const jtoken = jwtdecoded(bearerToken)\n    var ip_adderss = (\"ip2\", req.headers['x-forwarded-for'] || '').split(',')[0] || req.connection.remoteAddress\n    var source = req.headers['user-agent'],\n        agentbrowser = useragent.parse(source);\n    //console.log(\"agent\", agentbrowser)\n    if (req.body.is_active === true) {\n        Accesspoint.findByIdAndUpdate({ _id: req.body.id }, {\n            $set: {\n                updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                user_ip: ip_adderss,\n                update_ip: ip_adderss,\n                is_registered: false,\n                update_agent: agentbrowser.browser + \"(\" + agentbrowser.version + \")\",\n                user_agent: req.header('User-Agent'), updated_time: Date.now(), is_active: req.body.is_active,\n            }\n        }).then(function (ok) {\n            console.log(\"ActiveAccesspoint result\", ok)\n            if (req.body.is_active === true) {\n                return res.send({ \"user_mesg\": \"User Activated\", \"status_code\": 1 });\n            }\n            else {\n                return res.send({ \"user_mesg\": \"User Deactived\", \"status_code\": 1 });\n            }\n\n        });\n    }\n    else {\n        Accesspoint.findByIdAndUpdate({ _id: req.body.id }, {\n            $set: {\n                updated_by: { id: jtoken.sub.id, user_name: jtoken.sub.user_name },\n                user_ip: ip_adderss,\n                update_ip: ip_adderss,\n                update_agent: agentbrowser.browser + \"(\" + agentbrowser.version + \")\",\n                user_agent: req.header('User-Agent'), updated_time: Date.now(), is_active: req.body.is_active,\n            }\n        }).then(function (ok) {\n            console.log(\"ActiveAccesspoint result\", ok)\n            if (req.body.is_active === true) {\n                return res.send({ \"user_mesg\": \"User Activated\", \"status_code\": 1 });\n            }\n            else {\n                return res.send({ \"user_mesg\": \"User Deactived\", \"status_code\": 1 });\n            }\n\n        });\n    }\n\n};\nexports.createStoreProduct = async (req, res) => {\n    let listStore = await StoreProduct.findOne({ store_id: req.body.store_id });\n    console.log(\"listStore result\", listStore)\n    if(listStore===null){\n        storeProduct = new StoreProduct({\n            store_product: req.body.store_product,\n            company_id: req.body.company_id,\n            store_id:req.body.store_id\n            \n        });\n        try {\n    \n            await storeProduct.save();\n            return res.send({\n                \"user_msg\": \"Store Product created successfully... \",\n                \"status_code\": 1\n            });\n        }\n        catch (err) {\n            console.log(err)\n            return res.status(500).send({\n                \"user_msg\": \"Error create store Product... \",\n            });\n        }\n    }else{\n        var existingStoreProductes=listStore.store_product\n        var storeProductes = existingStoreProductes.concat(req.body.store_product);\n        const data = await StoreProduct.findByIdAndUpdate({ _id: listStore._id }, {\n            $set: {\n                store_product:storeProductes\n\n            }\n\n        })\n       // let productDetails = await Products.find({ _id: { \"$in\": listStore.store_product } });\n        return res.status(200).send({  \"user_msg\": \"Store Product created successfully... \", \"status_code\": 1 })\n\n    }\n \n};\nexports.listStoreProduct = async (req, res) => {\n    console.log(\" req body\", req.body)\n    let listStore = await StoreProduct.findOne({ store_id: req.body.store_id });\n    console.log(\"listStore result\", listStore)\n    if(listStore===null){\n        return res.status(200).send({ \"store_productes\": [], \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n    }\n    else{\n        let productDetails = await Products.find({ _id: { \"$in\": listStore.store_product } });\n        return res.status(200).send({ \"store_productes\": productDetails, \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n    }\n\n};\nexports.deletestoreproduct = async (req, res) => {\n    console.log(\" req body\", req.body)\n    let listStore = await StoreProduct.findOne({ store_id: req.body.store_id });\n    console.log(\"listStore result\", listStore)\n    if(listStore===null){\n        return res.status(200).send({ \"store_productes\": [], \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n    }\n    else{\n        var value = req.body.product_id\n        var arr = listStore.store_product\n        arr = arr.filter(item => item !== value)\n        console.log(arr)\n        const data = await StoreProduct.findByIdAndUpdate({ _id: listStore._id }, {\n            $set: {\n                store_product:arr\n\n            }\n\n        })\n       // let productDetails = await Products.find({ _id: { \"$in\": listStore.store_product } });\n        return res.status(200).send({  \"user_msg\": \"Successfully deleted\", \"status_code\": 1 })\n    }\n\n};\nexports.globalProductList = async (req, res) => {\n    console.log(\" req body\", req.body)\n    const productArr=[]\n    const productArr1=[]\n    let listStore = await StoreProduct.findOne({ store_id: req.body.store_id });\n    console.log(\"listStore result\", listStore)\n    if(listStore===null){\n        let totalProductes = await Products.find();\n        return res.status(200).send({ \"store_productes\": totalProductes, \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n    }else{\n        var b=listStore.store_product\n        let listproduct = await Products.find();\n        console.log(\"listproduct result\", listproduct)\n\n        let data=[];\n        listproduct.forEach(dat=>{\n        if(!b.includes(dat._id)){\n        data.push(dat)\n         }\n        })\n  console.log(\"data\",data)\n        // for (let i = 0; i < listproduct.length; i++) {\n        //     for (let j = 0; j < listStore.store_product.length; j++) {\n        //         console.log((listproduct[i]._id).toString())\n        //         console.log(listStore.store_product[j])\n        //         if((listproduct[i]._id).toString() !=listStore.store_product[j]){\n        //             console.log(123)\n        //             let obj1 ={\"_id\":(listproduct[i]._id).toString(),\"product_name\":listproduct[i].product_name}\n        //             productArr1.push(obj1)\n        //         }\n                \n        //     }\n            \n            \n        // }\n        return res.status(200).send({ \"store_productes\": data, \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n\n    }\n    \n    // console.log(\"new array\",array)\n    // for (let j = 0; j < array.length; j++) {\n    //     console.log(\"id\",array[j].id)\n    //     if(array[j].id === \"60c2f4a5f4b9b91275fc3480\"){\n    //         console.log(123)\n    //     }else{\n    //         console.log(456)\n    //     }\n    // }\n   \n    // for (let i = 0; i < listproduct.length; i++) {\n    //     for (let j = 0; j < listStore.store_product.length; j++) {\n    //         console.log(\"id1\",listproduct[i]._doc._id )\n    //         console.log(\"id2\",listStore.store_product[j])\n    //         console.log(listproduct[i]._doc._id===listStore.store_product[j])\n    //         if(listproduct[i]._id === listStore.store_product[j]){\n    //             console.log(123)\n    //         }else{\n    //             console.log(456)\n    //         }\n    //     }\n    // }\n     //console.log(\"ListUsers result\", ListUsers)\n    // for (let i = 0; i < ListUsers.length; i++) {\n    //     let storedata = await Stores.find({ _id: { \"$in\": ListUsers[i].user_stores } });\n    //     ListUsers[i]._doc = Object.assign(ListUsers[i]._doc, { stores: [] })\n    //     //console.log(\"store data\",storedata)\n    //     for (let j = 0; j < storedata.length; j++) {\n    //         ListUsers[i]._doc.stores.push(storedata[j])\n    //         console.log(ListUsers)\n    //     }\n    // }\n    // if(listStore===null){\n    //     return res.status(200).send({ \"store_productes\": [], \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n    // }\n    // else{\n    //     let productDetails = await Products.find({ _id: { \"$in\": listStore.store_product } });\n    //     return res.status(200).send({ \"store_productes\": productDetails, \"user_msg\": \"Successfully...\", \"status_code\": 1 })\n    // }\n\n};\nexports.getList = async (req, res) => {\n        const toplevel = [];\n        await Geners.find().then(function (listStore) {\n        listStore.forEach(function (item) {\n          if (item.parent_id === undefined) {\n            toplevel.push(item);\n          }\n        });\n        for (let i = 0; i < listStore.length; i++) {\n            for (let j = 0; j < toplevel.length; j++) {\n              if (toplevel[j]._id.toString() === listStore[i].parent_id) {\n                if (toplevel[j]._doc.subcategory != undefined) {\n                  toplevel[j]._doc.subcategory.push(listStore[i]);\n                } else {\n                  toplevel[j]._doc = Object.assign(toplevel[j]._doc, { subcategory: [] });\n                  toplevel[j]._doc.subcategory.push(listStore[i]);\n                }\n              }\n            }\n          }\n        // console.log(\"toplevel\",toplevel)\n        //        for (let i = 0; i < toplevel.length; i++) {\n        //   for (let x = 0; x < toplevel[i].subcategory.length; x++) {\n        //     for (let j = 0; j < listStore.length; j++) {\n        //       if (toplevel[i].subcategory[x]._id === listStore[j].parent_id) {\n        //         if (toplevel[i].subcategory[x].subcategory != undefined) {\n        //           toplevel[i].subcategory[x].subcategory.push(listStore[j]);\n        //         } else {\n        //           toplevel[i].subcategory[x] = Object.assign(\n        //             toplevel[i].subcategory[x],\n        //             { subcategory: [] }\n        //           );\n        //           toplevel[i].subcategory[x].subcategory.push(listStore[j]);\n        //         }\n        //       }\n        //     }\n        //   }\n        // }\n        return res.status(200).send({  \"user_msg\": \"Successfully deleted\", \"status_code\": 1,\"data\":toplevel })\n    })\n    //     for (let i = 0; i < toplevel.length; i++) {\n    //       for (let x = 0; x < toplevel[i].subcategory.length; x++) {\n    //         for (let j = 0; j < data.Items.length; j++) {\n    //           if (toplevel[i].subcategory[x].id === data.Items[j].parent_id) {\n    //             if (toplevel[i].subcategory[x].subcategory != undefined) {\n    //               toplevel[i].subcategory[x].subcategory.push(data.Items[j]);\n    //             } else {\n    //               toplevel[i].subcategory[x] = Object.assign(\n    //                 toplevel[i].subcategory[x],\n    //                 { subcategory: [] }\n    //               );\n    //               toplevel[i].subcategory[x].subcategory.push(data.Items[j]);\n    //             }\n    //           }\n    //         }\n    //       }\n    //     }\n    //     res.json({\n    //       message: \"success\",\n    //       topLevel: toplevel,\n    //       status_code: 200,\n    //     });\n    //   }\n    // });\n};\n// server.post(\"/get/genre/toplevel\", (req, res) => {\n//     const toplevel = [];\n//     const lowlevel = [];\n//     var params = {\n//       TableName: \"Genre-34xd3ccxmfcyzk7f5zentktr6i-dev\",\n//     };\n//     docClient.scan(params, function (err, data) {\n//       if (err) {\n//         console.log(err);\n//         res.json({\n//           message: \"Error get data\",\n//           status_code: 200,\n//         });\n//       } else {\n//         data.Items.forEach(function (item) {\n//           if (item.parent_id === undefined) {\n//             toplevel.push(item);\n//           }\n//         });\n//         for (let i = 0; i < data.Items.length; i++) {\n//           for (let j = 0; j < toplevel.length; j++) {\n//             if (toplevel[j].id === data.Items[i].parent_id) {\n//               if (toplevel[j].subcategory != undefined) {\n//                 toplevel[j].subcategory.push(data.Items[i]);\n//               } else {\n//                 toplevel[j] = Object.assign(toplevel[j], { subcategory: [] });\n//                 toplevel[j].subcategory.push(data.Items[i]);\n//               }\n//             }\n//           }\n//         }\n//         for (let i = 0; i < toplevel.length; i++) {\n//           for (let x = 0; x < toplevel[i].subcategory.length; x++) {\n//             for (let j = 0; j < data.Items.length; j++) {\n//               if (toplevel[i].subcategory[x].id === data.Items[j].parent_id) {\n//                 if (toplevel[i].subcategory[x].subcategory != undefined) {\n//                   toplevel[i].subcategory[x].subcategory.push(data.Items[j]);\n//                 } else {\n//                   toplevel[i].subcategory[x] = Object.assign(\n//                     toplevel[i].subcategory[x],\n//                     { subcategory: [] }\n//                   );\n//                   toplevel[i].subcategory[x].subcategory.push(data.Items[j]);\n//                 }\n//               }\n//             }\n//           }\n//         }\n//         res.json({\n//           message: \"success\",\n//           topLevel: toplevel,\n//           status_code: 200,\n//         });\n//       }\n//     });\n//   });\nfunction stringGen(len) {\n    var text = \"\";\n\n    var charset = \"0123456789\";\n\n    for (var i = 0; i < len; i++)\n        text += charset.charAt(Math.floor(Math.random() * charset.length));\n\n    return text;\n}\nfunction jwtdecoded(token) {\n    var token = token\n    var decoded = jwt_decode(token);\n\n    return decoded;\n}\n\n//# sourceURL=webpack://vc-agent-api/./controller/ac-controllers.js?");

/***/ }),

/***/ "./model/companies.js":
/*!****************************!*\
  !*** ./model/companies.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n// const config = require('../common/config/env.config');\n// mongoose.connect(config.dbstring, { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\n\nconst Companies = mongoose.model('tbl_companies', new mongoose.Schema({\n    company_name: { type: String },\n    company_address: { type: String },\n    // created_by: { id: {type: String}, user_name: {type: String} },\n    // created_time: { type: Date, default: Date.now},\n    // updated_by: { id: {type: String}, user_name: {type: String} },\n    // updated_time: {type: Date, default: Date.now},\n    // is_active:{type: Boolean,default:true},\n    // create_ip :{type: String},\n    // create_agent :{type: String},\n    // update_ip :{type: String},\n    // update_agent :{type: String}\n\n}, { versionKey: false }));\n\nexports.Companies = Companies;\n\n\n//# sourceURL=webpack://vc-agent-api/./model/companies.js?");

/***/ }),

/***/ "./model/geners.js":
/*!*************************!*\
  !*** ./model/geners.js ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n// const config = require('../common/config/env.config');\n// mongoose.connect(config.dbstring, { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\n\nconst Geners= mongoose.model('geners', new mongoose.Schema({\n    parent_id: { type: String },\n    gen_name: { type: String },\n    sort_order: { type: String },\n    // created_by: { id: {type: String}, user_name: {type: String} },\n    // created_time: { type: Date, default: Date.now},\n    // updated_by: { id: {type: String}, user_name: {type: String} },\n    // updated_time: {type: Date, default: Date.now},\n    // is_active:{type: Boolean,default:true},\n    // create_ip :{type: String},\n    // create_agent :{type: String},\n    // update_ip :{type: String},\n    // update_agent :{type: String}\n\n}, { versionKey: false }));\n\nexports.Geners = Geners;\n\n\n//# sourceURL=webpack://vc-agent-api/./model/geners.js?");

/***/ }),

/***/ "./model/manager.js":
/*!**************************!*\
  !*** ./model/manager.js ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n// const config = require('../common/config/env.config');\n// mongoose.connect(config.dbstring, { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\n\nconst Manager = mongoose.model('tbl_manager', new mongoose.Schema({\n    manager_name: { type: String },\n    company_id: { type: String },\n    \n\n}, { versionKey: false }));\n\nexports.Manager = Manager;\n\n\n//# sourceURL=webpack://vc-agent-api/./model/manager.js?");

/***/ }),

/***/ "./model/storeProduct.js":
/*!*******************************!*\
  !*** ./model/storeProduct.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose= __webpack_require__(/*! mongoose */ \"mongoose\");\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\nconst StoreProduct = mongoose.model('tbl_store_prodect', new mongoose.Schema({\n    company_id:{type:String},\n    store_product:[{type: String}],\n    store_id:{type:String}\n   }, { versionKey: false }));\n   \n\n\nexports.StoreProduct = StoreProduct;\n\n//# sourceURL=webpack://vc-agent-api/./model/storeProduct.js?");

/***/ }),

/***/ "./model/users.js":
/*!************************!*\
  !*** ./model/users.js ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n// const config = require('../common/config/env.config');\n// mongoose.connect(config.dbstring, { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\n\nconst User = mongoose.model('tbl_users', new mongoose.Schema({\n    user_name: { type: String },\n    mobile_no: { type: String },\n    email:{type: String},\n   password:{type: String},\n   otp:{type: String},\n   otp_verify:{type: Boolean,default:false},\n   is_active:{type: Boolean,default:true},\n\n}, { versionKey: false }));\n\nexports.User = User;\n\n\n//# sourceURL=webpack://vc-agent-api/./model/users.js?");

/***/ }),

/***/ "./model/vc-acesspoint.js":
/*!********************************!*\
  !*** ./model/vc-acesspoint.js ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose= __webpack_require__(/*! mongoose */ \"mongoose\");\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\nconst Accesspoint = mongoose.model('tbl_access_point', new mongoose.Schema({\n    company_id:{type:String},\n    store_id:{type:String},\n    name:{type:String},\n    ip_address:{type:String},\n    mac_address:{type:String},\n    port:{type:String},\n    model_id:{type:String},\n    status:{type: Boolean,default:true},\n    esls:{type:String},\n    lan_Id:{type:String},\n    pan_id:{type:String},\n    version:{type:String},\n    roaming:{type:String},\n    created_time: { type: Date, default: Date.now},\n    updated_time: {type: Date, default: Date.now},\n    created_by: { id: {type: String}, user_name: {type: String} },\n    updated_by: { id: {type: String}, user_name: {type: String} },\n    is_active:{type: Boolean,default:true},\n    user_ip :{type: String},\n    user_agent :{type: String},\n    create_ip :{type: String},\n    create_agent :{type: String},\n    update_ip :{type: String},\n    update_agent :{type: String}\n   }, { versionKey: false }));\n   \n\n\nexports.Accesspoint = Accesspoint;\n\n//# sourceURL=webpack://vc-agent-api/./model/vc-acesspoint.js?");

/***/ }),

/***/ "./model/vc-esl.js":
/*!*************************!*\
  !*** ./model/vc-esl.js ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose= __webpack_require__(/*! mongoose */ \"mongoose\");\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\nconst Esl = mongoose.model('tbl_esls', new mongoose.Schema({\n    company_id:{type:String},\n    store:{type:String},\n    name:{type:String},\n    unique_id:{type:String},\n    mac_address:{type:String},\n    battery_status:{type:String},\n    poll_interval:{type:String},\n    voltage:{type:String},\n    version:{type:Number},\n    image:{type:String},\n    last_image_update:{type: Date, default: Date.now},\n    last_poll:{type: Date, default: Date.now},\n    last_login_ip:{type:String},\n    last_login_time:{type: Date, default: Date.now},\n    created_time: { type: Date, default: Date.now},\n    updated_time: {type: Date, default: Date.now},\n    created_by: { id: {type: String}, user_name: {type: String} },\n    updated_by: { id: {type: String}, user_name: {type: String} },\n    is_active:{type: Boolean,default:true},\n    user_ip :{type: String},\n    user_agent :{type: String},\n    create_ip :{type: String},\n    create_agent :{type: String},\n    update_ip :{type: String},\n    update_agent :{type: String}\n   }, { versionKey: false }));\n   \n\n\nexports.Esl = Esl;\n\n//# sourceURL=webpack://vc-agent-api/./model/vc-esl.js?");

/***/ }),

/***/ "./model/vc-products.js":
/*!******************************!*\
  !*** ./model/vc-products.js ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose= __webpack_require__(/*! mongoose */ \"mongoose\");\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\nconst Products = mongoose.model('tbl_products', new mongoose.Schema({\n    company_id:{type:String},\n    product_unique_id:{type:String},\n    product_name:{type:String},\n    standard_price:{type:String},\n    sale_price:{type:String},\n    discount:{type:String},\n    bar_code:{type:String},\n    content:{type:String},\n    unit:{type:String},\n    created_time: { type: Date, default: Date.now},\n    updated_time: {type: Date, default: Date.now},\n    created_by: { id: {type: String}, user_name: {type: String} },\n    updated_by: { id: {type: String}, user_name: {type: String} },\n    is_active:{type: Boolean,default:true},\n    user_ip :{type: String},\n    user_agent :{type: String},\n    create_ip :{type: String},\n    create_agent :{type: String},\n     update_ip :{type: String},\n    update_agent :{type: String}\n   }, { versionKey: false }));\n   \n\n\nexports.Products = Products;\n\n//# sourceURL=webpack://vc-agent-api/./model/vc-products.js?");

/***/ }),

/***/ "./model/vc-stores.js":
/*!****************************!*\
  !*** ./model/vc-stores.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Joi = __webpack_require__(/*! joi */ \"joi\");\nconst mongoose= __webpack_require__(/*! mongoose */ \"mongoose\");\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nmongoose.connect(\"mongodb://vcndevuser:Banh8162jak062@localhost/vcndevdb\", { useNewUrlParser: true, useUnifiedTopology: true ,useFindAndModify: false});\n\nconst Stores = mongoose.model('tbl_stores', new mongoose.Schema({\n    company_id:{type:String},\n    store_name:{type:String},\n    store_city:{type:String},\n    store_address:{type:String},\n    store_manager:{type:String},\n    created_time: { type: Date, default: Date.now},\n    updated_time: {type: Date, default: Date.now},\n    created_by: { id: {type: String}, user_name: {type: String} },\n    updated_by: { id: {type: String}, user_name: {type: String} },\n    is_active:{type: Boolean,default:true},\n    user_ip :{type: String},\n    user_agent :{type: String},\n    create_ip :{type: String},\n    create_agent :{type: String},\n     update_ip :{type: String},\n    update_agent :{type: String}\n   }, { versionKey: false }));\n   \n\n\nexports.Stores = Stores;\n\n//# sourceURL=webpack://vc-agent-api/./model/vc-stores.js?");

/***/ }),

/***/ "./route/ac-route.js":
/*!***************************!*\
  !*** ./route/ac-route.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const accontroller = __webpack_require__(/*! ../controller/ac-controllers */ \"./controller/ac-controllers.js\");\nconst authorization = __webpack_require__(/*! ../common/authorization/Jwtauthorization */ \"./common/authorization/Jwtauthorization.js\");\nconst multer = __webpack_require__(/*! multer */ \"multer\")\n\nexports.routesConfig = function (app) {\n  app.post('/api/v1/user/create', [\n    //authorization.verifyToken,\n    accontroller.insert\n  ]);\n  app.post('/api/v1/signin', [\n    accontroller.login\n  ]);\n   app.post('/api/v1/otp/verify', [\n    //authorization.verifyToken,\n\n    accontroller.otpverify\n  ]);\n  app.post('/api/v1/user/get', [\n    accontroller.getUser\n  ])\n  app.post('/api/v1/changepassword', [\n    //authorization.verifyToken,\n    accontroller.ChangePassword\n  ]);\n  app.post('/api/v1/forgot/password', [\n    //authorization.verifyToken,\n    accontroller.forgotPassword\n  ]);\n  // app.post('/api/v1/user/update', [\n  //   //authorization.verifyToken,\n  //   accontroller.updateAgent\n  // ]);\n  // app.post('/api/v1/user/update/status', [\n  //   //authorization.verifyToken,\n  //   accontroller.deactiveAgentById\n  // ]);\n  // app.post('/api/v1/Admin/update', [\n  //   //authorization.verifyToken,\n  //   accontroller.Adminedit\n  // ]);\n  // app.post('/api/v1/otp/verify', [\n  //   //authorization.verifyToken,\n\n  //   accontroller.otpverify\n  // ]);\n\n  // app.post('/api/v1/password/update', [\n  //   //authorization.verifyToken,\n  //   accontroller.passwordUpdate\n  // ]);\n  // app.post('/api/v1/verify/token', [\n  //   //authorization.verifyToken,\n  //   accontroller.verifyToken\n  // ]);\n  // app.post('/api/v1/create/company', [\n  //   //authorization.verifyToken,\n  //   accontroller.createCompanies\n  // ]);\n  // app.post('/api/v1/create/manager', [\n  //   //authorization.verifyToken,\n  //   accontroller.createManager\n  // ]);\n  // app.post('/api/v1/list/manager', [\n  //   //authorization.verifyToken,\n  //   accontroller.listUserManagers\n  // ]);\n  // app.post('/api/v1/list/users', [\n  //   //authorization.verifyToken,\n  //   accontroller.listUsers\n  // ]);\n  // app.post('/api/v1/store/create', [\n  //   //authorization.verifyToken,\n  //   accontroller.createstore\n  // ]);\n  // app.post('/api/v1/store/list', [\n  //   accontroller.Getstore\n  // ]);\n  // app.post('/api/v1/store/update', [\n  //   accontroller.updatestore\n  // ]);\n  // app.post('/api/v1/store/get', [\n  //   accontroller.GetOnestore\n  // ]);\n  // app.post('/api/v1/store/delete', [\n  //   accontroller.deletestore\n  // ]);\n  // app.post('/api/v1/store/search', [\n  //   accontroller.searchQuery\n  // ]);\n  // app.post('/api/v1/product/create', [\n  //   accontroller.Createproduct\n  // ]);\n  // app.post('/api/v1/product/Get', [\n  //   accontroller.Getproduct\n  // ]);\n  // app.post('/api/v1/product/units', [\n  //   accontroller.Units\n  // ]);\n  // app.post('/api/v1/product/Getone', [\n  //   accontroller.Getoneproduct\n  // ]);\n  // app.post('/api/v1/Product/Update', [\n  //   accontroller.Updateproduct\n  // ]);\n  // app.post('/api/v1/product/Delete', [\n  //   accontroller.Deleteproduct\n  // ]);\n  // app.post('/api/v1/product/search', [\n  //   accontroller.searchproduct\n  // ]);\n  // app.post('/api/v1/esl/create', [\n  //   accontroller.createEsl\n  // ]);\n  // app.post('/api/v1/esl/Get', [\n  //   accontroller.getEsl\n  // ])\n  // app.post('/api/v1/esl/Search', [\n  //   accontroller.SerachEsl\n  // ])\n  // app.post('/api/v1/esl/delete', [\n  //   accontroller.deleteEsl\n  // ])\n  \n  // app.post('/api/v1/mail', [\n  //   accontroller.mail\n  // ])\n  // app.post('/api/v1/company/liststores',[\n  //   accontroller.GetListstores\n  // ]);\n  //  app.post('/api/v1/company/listproducts',[\n  //   accontroller.GetListproducts\n  //  ])\n  //  app.post('/api/v1/Logout',[\n  //   accontroller.Logout\n  //  ])\n  //  app.post('/api/v1/Store/pagination',[\n  //   accontroller.Storepagination\n  // ])\n  // app.post('/api/v1/Product/pagination',[\n  //   accontroller.Productpagination\n  // ])\n  // app.post('/api/v1/User/Search',[\n  //   accontroller.searchUser\n  // ])\n  // app.post('/api/v1/User/pagination',[\n  //   accontroller.Userpagination\n  // ])\n  // app.post('/api/v1/Accesspoint/created',[\n  //   accontroller.createAccesspoint\n  // ])\n  // app.post('/api/v1/Accesspoint/Get',[\n  //   accontroller.GetAccesspoint\n  // ])\n  // app.post('/api/v1/Accesspoint/search',[\n  //   accontroller.SerachAccesspoint\n  // ])\n  // app.post('/api/v1/Accesspoint/user/update',[\n  //   accontroller.ActiveAccesspoint\n  // ])\n  // app.post('/api/v1/store/product/create',[\n  //   accontroller.createStoreProduct\n  // ])\n  // app.post('/api/v1/store/product/list',[\n  //   accontroller.listStoreProduct\n  // ])\n  // app.post('/api/v1/store/product/global/list',[\n  //   accontroller.globalProductList\n  // ])\n  // app.post('/api/v1/store/product/delete',[\n  //   accontroller.deletestoreproduct\n  //])\n  app.post('/get/list',[\n    accontroller.getList\n  ])\n};\n\n//# sourceURL=webpack://vc-agent-api/./route/ac-route.js?");

/***/ }),

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("aws-sdk");;

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("body-parser");;

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("cors");;

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("dotenv");;

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("express");;

/***/ }),

/***/ "express-useragent":
/*!************************************!*\
  !*** external "express-useragent" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = require("express-useragent");;

/***/ }),

/***/ "joi":
/*!**********************!*\
  !*** external "joi" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("joi");;

/***/ }),

/***/ "joi-objectid":
/*!*******************************!*\
  !*** external "joi-objectid" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("joi-objectid");;

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("jsonwebtoken");;

/***/ }),

/***/ "jwt-decode":
/*!*****************************!*\
  !*** external "jwt-decode" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("jwt-decode");;

/***/ }),

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongoose");;

/***/ }),

/***/ "multer":
/*!*************************!*\
  !*** external "multer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("multer");;

/***/ }),

/***/ "nodemailer":
/*!*****************************!*\
  !*** external "nodemailer" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("nodemailer");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
eval("var mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nconst express = __webpack_require__(/*! express */ \"express\");\n//const config = require('../common/config/env.config');\nconst app = express();\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\nconst cors = __webpack_require__(/*! cors */ \"cors\");\nconst Joi = __webpack_require__(/*! joi */ \"joi\");\nJoi.objectId = __webpack_require__(/*! joi-objectid */ \"joi-objectid\")(Joi);\nconst agent = __webpack_require__(/*! ../route/ac-route */ \"./route/ac-route.js\");\nconst useragent = __webpack_require__(/*! express-useragent */ \"express-useragent\");\nconst ID = 'AKIAX62NRCQRWYTTCFPH';\nconst SECRET = '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';\nconst authorization = __webpack_require__(/*! ../common/authorization/Jwtauthorization */ \"./common/authorization/Jwtauthorization.js\");\n\n// The name of the bucket that you have created\nconst BUCKET_NAME = \"esethu-digital-assets-dev\";\nconst IMAGE_BASE_URL = \"https://esethu-digital-assets-dev.s3.ap-south-1.amazonaws.com/\";\nconst multer = __webpack_require__(/*! multer */ \"multer\")\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\nvar AWS = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\n\n\nAWS.config.update({\n    region: \"ap-south-1\"\n});\nconst s3 = new AWS.S3({\n    accessKeyId: \"AKIAX62NRCQRWYTTCFPH\",\n    secretAccessKey: \"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\"\n})\n__webpack_require__(/*! dotenv */ \"dotenv\").config()\nconsole.log(\"3700\")\napp.use(cors());\napp.use(function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Credentials', 'true');\n    res.header('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE');\n    res.header('Access-Control-Expose-Headers', 'Content-Length');\n    res.header('Access-Control-Allow-Headers', 'Accept, Authorization, Content-Type, X-Requested-With, Range');\n    if (req.method === 'OPTIONS') {\n        return res.send(200);\n    } else {\n        return next();\n    }\n});\n \napp.use(express.json());\n// app.use(express.json({limit: '50mb'}));\n// app.use(express.urlencoded({limit: '50mb'}));\nmongoose.promise = global.promise;\napp.use(bodyParser.json({limit: '500mb'}));\napp.use(bodyParser.urlencoded({limit: '500mb', extended: true,parameterLimit:50000}));\nagent.routesConfig(app)\n\n\n\napp.use(function(err, req, res, next){\n    res.send({error: err.message});\n    });\n    \n    \napp.listen(\"3700\", function () {\n    console.log('app listening at port %s', \"3700\");\n    });\n    \n\n//# sourceURL=webpack://vc-agent-api/./src/index.js?");
})();

/******/ })()
;